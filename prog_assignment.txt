PROGRAMMING ASSIGNMENT - OPTIMAL INFLUENCE IN A HIERARCHY STRUCTURE
DUE NOVEMBER 24th, 11:59 PM via Blackboard

Please read this entire file before beginning on the assignment. In particular,
please pay attention to the submission specifications. There will be a large
score penalty on submissions which do not adhere to the submission
specifications. For this project, you must submit both code to solve the problem
described below, and a write up with analysis of your algorithm.

===
PROBLEM DESCRIPTION

You are given the task of spreading propaganda within a company. You only have
the time to talk to a certain amount of people, but you are guaranteed that if
you influence somebody, they will influence their boss, that person will
influence their boss, and so on, all the way up to the CEO. You have mapped out
the entire company hierarchy, and assigned a utility value to each person,
indicating how valuable it would be to influence them. Given this setup and a
limit on the number of people you can talk to, you want to compute the optimal
set of people to influence. An optimal set of people will maximize the total
utility of all persons influenced, directly or indirectly, by your selection.

There will be exactly one person, the CEO, with no boss in the hierarchy. All
other people will eventually answer to this person on the command chain, but not
necessarily directly.

You are guaranteed that each person will have at most one boss, but that boss
may have another in turn. For example, person A may have a boss B, whose boss is
C, whose boss is D, whose boss is the CEO. Thus influencing person A will
automatically influence B, C, D, and the CEO.

Different employees may have bosses in common in the command chain. You DO NOT
obtain additional value for influencing a person more than once. For example, if
A and B both answer directly to the CEO, and you influence both, you will
receive a value of val(A)+val(B)+val(CEO), not val(A)+val(B)+2val(CEO).

The employees will be given to you as numbered positive integers. Each employee
will come with its direct boss and the value of influencing them. The first
employee will have id 1, and boss id 0, indicating that it is the CEO.

Given a positive integer k, your algorithm must select k employees to influence.

Input Format:
Line 1: n k
n is the number of employees to follow, k is the number of employees you are expected to influence
Line 2 through n+1: i j k
i is the id of the employee
j is the boss id of the employee
k is the value of influencing the employee (always non-negative)

Output Format:
Line 1: VALUE
Where VALUE is the max possible total utility from a selection of k employees.

Sample Input:
5 2
1 0 10
2 1 10
3 1 50
4 3 5
5 3 15

Sample Output:
85

Explanation: The optimal employees to influence are 2 and 5. Influencing these
will in turn also influence their bosses 1 and 3, for an optimal total value of
10+10+50+15 = 85. Employee 4 is left uninfluenced.

===
IMPLEMENTATION DETAILS

Your program should take its input from stdin and print its output to stdout.
When we test your submission, we will be piping input into the program, and
piping the output to a temporary file that we will diff with the expected
output. Your submitted source code must build and run on standard Linux systems.
I will be testing on an Ubuntu 12 system, so if it works on the computers in the
WVH first floor lab, it will work on my system.

You may do this project in C, C++, Java, or Python. If you wish to use a
different language, you must gain explicit permission before submission. Thus I
recommend making such a decision early on. Most languages are acceptable as long
as the setup of the run environment can be done as a one liner in Linux. You may
not use libraries, internal or external, for things other than basic I/O, or
data structures that have been discussed in class. Arrays, linked lists, queues,
and stacks are all okay. Since we discussed both priority queues and union/find,
any library which implements these is also okay, but you should still not use
libraries which do not come with the standard distribution of the language. Note
that generic set structures, hash tables, and python dictionaries are not
allowed. See the end of this document for some tips on how to get the same
behavior with faster run time for this data set.

===
SUBMISSION DETAILS

PLEASE READ THIS CAREFULLY. Any submission which does not satisfy these
requirements will automatically be deducted 25% off the final grade. If you have
any questions at all regarding these, do not hesitate to ask. Their purpose is
to ensure speedy grading and to resolve any ambiguities as to what is expected
from your submission.

We've created an assignment on Blackboard called Programming Assignment. Your
final submission must be handed in as an attachment for this assignment, before
November 24th, 11:59 PM. Your submission should be a single tar.gz bundle whose
name is your Husky ID. For example, if your Husky ID is dippel.m, then your
submission should be dippel.m.tar.gz. Inside this tar should be a single folder
with the name same as the tar bundle. Inside this folder, we expect the
following files:

/Source/ - a folder containing the source code for your implementation. 

build.bash - a bash script to build the executable implementation from your
	/Source/ folder to the current folder, outputting to an extensionless file
	named sol. If your implementation runs as a non-compiled source, such as
	Python, then this may be as simple as copying the source to the current
	folder and naming it sol. It shouldn't be more than one or two lines of
	code. Below is a sample one liner if you did this project in C++, and your
	main source file is MyImpl.cpp:

g++ ./Source/MyImpl.cpp -o sol


Readme.pdf - A write up of no more than 4 pages with description and analysis of your implementation. In particular, we expect the following:
- A mathematical formulation of the problem to be solved
- A high level, English description of the algorithm you used to solve the problem
- A pseudo code description of the algorithm
- A proof of correctness of the algorithm
- A run time analysis of your algorithm, accounting for the insert / query run times of the data structures you used in your implementation

Regarding the code submission, please do not hand in any compiled code. I will
always recompile using the build script and run tests with the newly compiled
program. You may hand in the sol file if it is a bash script to start your executable.

===
TESTING DETAILS

Your program must take input from STDIN and output its final answer to STDOUT.
We have a number of test files which we will pipe into your program, and check
the appropriate output. Your final executable, sol, should be able to handle
input as follows:

./sol < inputFile.in > outputFile.out

This will pipe input from inputFile.in into STDIN while running sol. The STDOUT
output from sol will be saved to outputFile.out. This allows me to run your code
on a number of test files, and compare the output to the expected output.
Provided are the script we will use to text your program, runtests.bash, as well
as a number of test files.

We will also provide with you the test script and a collection of test cases to
check your program on. If your program takes longer than a minute on a case,
that will be considered a failed test. The largest test case will have about
800,000 employees. The test script, runtests.bash, will be called as:
./runtests.bash ./sol
where sol is the executable that results from building your project.

===
IMPLEMENTATION HINTS 

---
Constant time look up tables

For this assignment, it is likely that you will want to maintain a set of
values, with fast insert and query operations. Standard hash tables and Python
dictionaries achieve this, but because they need to work for generic data
structures, are not the most efficient solution for this problem. Since you are
given the minimum and maximum employee ID, which are integers, you can get the
same behavior by using a large array.

For example, in python, if you had employees numbered from 1 to N, you would
initialize the array as:
set = [False] * (N+1)

Then we can check if an element i has been inserted by checking set[i], insert
element i by setting set[i] = True, and delete by setting set[i] = False. This
will be faster than if you used a dictionary for the same task, and uses the
same syntax.

---
Reading and parsing input

Some of the test files are very large, but reading the input should not be the
bottleneck on your implementation. In particular, you should not have to read
the entire file more than once, and you should not attempt to read in the entire
file as one string. All of the data is separated via lines in the input files,
so you should parse the file one line at a time.

---
Making an executable Python script

If you work in Python, you do not need to hand in compiled Python code. Instead,
you can hand in a Python file which is executable in the terminal. First, add
the following line to the beginning of your python:

#!/usr/bin/python

Then, navigate to where your file is in the terminal, and add execution
privileges to the file:

chmod +x mySolution.py

Now, you can call ./mySolution.py in the terminal without explicitly calling
Python in the command.

---
Making a sol file for Java projects

If you work in Java, you will need to call your main class to run in the JVM.
In order to have a sol file which can be called via command line, I recommend
you do the following:

i) Your build script should compile your source code into class files, which can
remain in the Source directory
ii) Your sol file can be a bash script which starts the JVM with the main class
file in the source directory.

---
Working on a Windows machine

If you do not have access to a Linux machine outside of WVH, it is still
possible to work on this project and test without coming into WVH. First, with
the exception of various C/C++ compilers, a project which builds and works
correctly on Windows without the use of operating system calls, which you do not
need for this assignment, should still work on other machines. In the end, if
you do not have a Linux machine, and do not know how to SSH into CCS machines
(and don't want to learn how), you should come into WVH at least once before
submission to confirm that your project builds and runs on these machines.
